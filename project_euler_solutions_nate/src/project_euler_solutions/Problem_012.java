package project_euler_solutions;

public class Problem_012 {

	final static boolean debug = false;
	private static boolean lessThanFiveHundredDivisors = true;
	
	public static void main(String[] args) {
		/* The sequence of triangle numbers is generated by adding the natural numbers. 
		 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
		 * The first ten terms would be:
		 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
		 * 
		 * Let us list the factors of the first seven triangle numbers:
		 * 1: 1
		 * 3: 1,3
		 * 6: 1,2,3,6
		 * 10: 1,2,5,10
		 * 15: 1,3,5,15
		 * 21: 1,3,7,21
		 * 28: 1,2,4,7,14,28
		 * We can see that 28 is the first triangle number to have over five divisors.
		 * What is the value of the first triangle number to have over five hundred divisors?
		 */
		long startTime = System.currentTimeMillis();
		long threshold = 1000;
		long result = 0;
		
		//this solution complexity is O(n^2), which is far too slow for thresholds larger than 1000.
		for(long i = 0; i < threshold; i++) {
			result = triangleOf(i + 1);
		}
		
//		long j = 1;
//		while(lessThanFiveHundredDivisors) {
//			triangleOf(j);
//			j++;
//		}
//		
		System.out.println("Done! Last number checked: " + result + "."
				+ "\nLess than five hundred divisors? "
				+ lessThanFiveHundredDivisors);
		long elapsedTime = System.currentTimeMillis() - startTime;
		System.out.println("Program run time: " + (elapsedTime) 
				+ " milliseconds.");
		if(elapsedTime >= 10000) System.out.println("In other words, too fucking long.");
	}
	
	public static long triangleOf(long n) {
		long sum = (n) * (n+1) / 2;
		if (debug) System.out.println("The " + n + "th triangle number is " + sum);
		findNumOfDivisorsFor(sum);
		return sum;
	}
	
	public static long findNumOfDivisorsFor(long triangleNumber) {
		long result = 1;
		for(long i = 1; i < triangleNumber; i++) {
			if(triangleNumber % i == 0) result++;
		}
		if (debug) System.out.println(triangleNumber + " has " + result + " divisors.");
		if (result >= 500) lessThanFiveHundredDivisors = false;
		return result;
	}

}
